#! /Users/dmarx/proj/hey/_venv/bin/python
import openai
import jsonlines
import logging
from pathlib import Path
import sys
import time
from rich.logging import RichHandler
from rich.live import Live
from rich.text import Text
from rich.console import Console
from rich.markdown import Markdown

console = Console()

FORMAT = "%(message)s"
logging.basicConfig(
    #level="NOTSET", 
    level='INFO',
    format=FORMAT, datefmt="[%X]", handlers=[RichHandler()])
logger = logging.getLogger("rich")

DEFAULT_SYSTEM_PROMPT = "Hello! I am a helpful, creative, clever, and friendly assistant."
DEFAULT_USER_TEMPLATE = "{text}"


def load_default_context(persona=None):
    context = [{"role": "system", "content": DEFAULT_SYSTEM_PROMPT}]
    if persona:
        context[0]['content'] = f"My name is {persona}."
    return context


def load_context(persona=None):
    if persona:
        hx = load_history(persona)
        return hx if hx else load_default_context(persona)
    return load_default_context()


def load_history(persona):
    hx = Path("personas") / f"{persona}.jsonl"
    if hx.exists():
        with jsonlines.open(hx) as reader:
            return list(reader)


def generate(prompt: str, context=None, user_template: str = DEFAULT_USER_TEMPLATE, **kargs) -> str:
    logger.debug(prompt)
    if not context:
        context = []
    context.append({"role": "user", "content": user_template.format(text=prompt)})
    completions = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=context, **kargs)
    return completions, context


def commit_to_memory(persona, context, response):
    user_msg, system_msg = context[-1], {"role": "system", "content": response}
    root = Path("personas")
    root.mkdir(exist_ok=True)
    if persona:
        with jsonlines.open(root / f"{persona}.jsonl", mode='a') as writer:
            writer.write(user_msg)
            writer.write(system_msg)
    user_msg['persona'] = persona
    system_msg['persona'] = persona
    with jsonlines.open(root / "any.jsonl", mode='a') as writer:
        writer.write(user_msg)
        writer.write(system_msg)

import os

def respond_as(prompt, persona=None):
    context = load_context(persona)
    response, context = generate(prompt=prompt, context=context, stream=True)

    terminal_height, _ = os.get_terminal_size()
    full_response = ""
    text=Text()
    with Live(text, console=console, refresh_per_second=10) as live:
        for chunk in response:
            if chunk['choices'][0].get('finish_reason') is not None:
                break
            delta = chunk['choices'][0]['delta']
            if 'role' in delta:
                continue
            content = delta['content']
            #text.append(content)
            full_response += content
            #live.update(text)
            live.update('\n'.join(full_response.split('\n')[-terminal_height+1:]))
        
    console.clear()
    console.print(f"Hey {persona+',' if persona else ''}{prompt}", style="green", highlight=False)
    console.print(Markdown(full_response), highlight=True)

    full_response = str(text)
    commit_to_memory(persona, context, full_response)
    return full_response


def choose_persona(message):
    if ":" not in message:
        return message, None
    persona, prompt = message.split(":", 1)
    return prompt, persona


if __name__ == '__main__':
    message = ' '.join(sys.argv[1:])
    prompt, persona = choose_persona(message)
    response = respond_as(prompt, persona)
